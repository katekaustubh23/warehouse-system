package com.auth.filter;

import com.auth.client.UserServiceClient;
import com.auth.session.LoginRequest;
import com.auth.session.LoginResponse;
import com.auth.token.JwtTokenService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;

import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.AuthenticationManager;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;

import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import javax.servlet.FilterChain;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import java.util.List;
import java.util.Map;


public class LoginAuthenticationFilter extends AbstractAuthenticationProcessingFilter {

    private static final Logger log = LoggerFactory.getLogger(LoginAuthenticationFilter.class);

    private final JwtTokenService jwtTokenService;
    public LoginAuthenticationFilter(String url, AuthenticationManager manager, JwtTokenService jwtTokenService) {
        super(new AntPathRequestMatcher(url, "POST"));
        setAuthenticationManager(manager);
        this.jwtTokenService = jwtTokenService;
    }

    @Override
    public Authentication attemptAuthentication(HttpServletRequest request,
                                                HttpServletResponse response)
            throws AuthenticationException, IOException {

        Map<String, String> credentials = new ObjectMapper()
                .readValue(request.getInputStream(), Map.class);

        String username = credentials.get("username");
        String password = credentials.get("password");

        UsernamePasswordAuthenticationToken token =
                new UsernamePasswordAuthenticationToken(credentials.get("username"), credentials.get("password"));

        return getAuthenticationManager().authenticate(token);
    }

    @Override
    protected void successfulAuthentication(HttpServletRequest request,
                                            HttpServletResponse response,
                                            FilterChain chain,
                                            Authentication authResult) throws IOException {
        String username = authResult.getName();

        List<String> roles = authResult.getAuthorities()
                .stream()
                .map(a -> a.getAuthority().replace("ROLE_", ""))
                .toList();

        String accessToken = jwtTokenService.generateAccessToken(username, roles);
        String refreshToken = jwtTokenService.generateRefreshToken(username);

//        String token = "GENERATE_JWT_HERE"; // Replace with JwtTokenFactory
        response.setContentType("application/json");
        response.getWriter().write("{\"token\": \"" + accessToken + "\", \"refreshToken\": \"" + refreshToken +"\"}");
    }

    @Override
    protected void unsuccessfulAuthentication(HttpServletRequest request,
                                              HttpServletResponse response,
                                              AuthenticationException failed) throws IOException {
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        response.getWriter().write("{\"error\": \"Invalid username or password\"}");
    }
}
