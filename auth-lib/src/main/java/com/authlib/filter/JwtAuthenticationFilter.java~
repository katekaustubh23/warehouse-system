package com.authlib.filter;


import com.authlib.auth.RefreshTokenManager;
import com.authlib.exception.InvalidTokenException;
import com.authlib.token.JwtAuthenticationToken;
import com.authlib.jwt.JwtTokenFactory;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;


import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;


import java.io.IOException;

@Component
public class JwtAuthenticationFilter extends BaseAuthenticationProcessingFilter {

    @Autowired
    private JwtTokenFactory jwtTokenFactory;

    public JwtAuthenticationFilter(String defaultFilterProcessesUrl, AuthenticationManager authManager) {
        super(defaultFilterProcessesUrl);
        setAuthenticationManager(authManager);
        setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher(defaultFilterProcessesUrl, "POST"));
    }

    /**
     * Attempts to authenticate the request using a JWT token provided in the "Authorization" header.
     */
    @Override
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        String header = request.getHeader("Authorization");

        if (!StringUtils.hasText(header) || !header.startsWith("Bearer ")) {
            throw new InvalidTokenException("Missing or invalid Authorization header");
        }

        String jwt = header.substring(7);

        try {
            // Delegate to factory for verification
            JwtAuthenticationToken authToken = jwtTokenFactory.verify(jwt);
            return authToken;

        } catch (ExpiredJwtException e) {
            throw new InvalidTokenException("Token expired", e);
        } catch (JwtException e) {
            throw new InvalidTokenException("Token invalid", e);
        }
    }

    /**
     * On successful authentication, returns access and refresh tokens.
     */
    @Override
    protected void handleSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authResult)
            throws IOException {
        String username = authResult.getName();
        String newAccessToken = jwtTokenFactory.createToken(username);
        String refreshToken = RefreshTokenManager.createTokenForUser(username);

        response.setContentType("application/json");
        response.getWriter().write("{" +
                "\"accessToken\": \"" + newAccessToken + "\"," +
                "\"refreshToken\": \"" + refreshToken + "\"" +
                "}");
    }
}
